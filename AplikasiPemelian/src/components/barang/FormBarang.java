package components.barang;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */

import io.github.cdimascio.dotenv.Dotenv;
import utils.Koneksi;
import javax.swing.JOptionPane;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
//import java.util.logging.Level;
//import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import java.util.HashMap;
import java.io.File;
import java.util.Arrays;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.swing.JRViewer;

/**
 *
 * @author LAB MULTI
 */
public class FormBarang extends javax.swing.JDialog {
    private DefaultTableModel table;
    String kodeLama;
    Koneksi konek = new Koneksi();
    Connection con = konek.buatKoneksi();
    JasperReport JasReport;
    JasperPrint JasPrint;
    HashMap parameter = new HashMap();
    JasperDesign JasDesign;
    
     // muat .env sekali saja (static block biar nggak panggil berkali-kali)
    private static final Dotenv dotenv = Dotenv.load();

    // bikin variabel URL static final
    private static final String mysqlUrl = String.format(
        "%s%s?user=%s&password=%s",
        dotenv.get("DBURL"),
        dotenv.get("DBNAME"),
        dotenv.get("DBUSER"),
        dotenv.get("DBPASSWORD")
    );

    /**
     * @param parent
     * @param modal
     * Creates new form FormBarang
     */
    public FormBarang(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(this);
        String[] data={"Kode","Nama Barang","Harga Beli","Harga Jual","Stok"};
        table = new DefaultTableModel(data,0);
        TabelBarang.setModel(table);
        tampil();
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(TabelBarang.getModel());
        TabelBarang.setRowSorter(sorter);
        sorter.setSortKeys(List.of(new RowSorter.SortKey(0, SortOrder.ASCENDING)));
        sorter.sort();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        InputHargaBeli = new javax.swing.JTextField();
        InputKodeBarang = new javax.swing.JTextField();
        InputNamaBarang = new javax.swing.JTextField();
        InputHargaJual = new javax.swing.JTextField();
        InputStok = new javax.swing.JTextField();
        ButtonSimpan = new javax.swing.JButton();
        ButtonEdit = new javax.swing.JButton();
        ButtonBatal = new javax.swing.JButton();
        ButtonHapus = new javax.swing.JButton();
        ButtonTutup = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabelBarang = new javax.swing.JTable();
        ButtonCari = new javax.swing.JButton();
        InputCari = new javax.swing.JTextField();
        ButtonCetak = new javax.swing.JButton();
        ButtonRefreshTabel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("INPUT BARANG");

        jLabel2.setText("Kode Barang:");

        jLabel3.setText("Nama Barang: ");

        jLabel4.setText("Harga Beli:");

        jLabel5.setText("Harga Jual:");

        jLabel6.setText("Stok:");

        InputHargaBeli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputHargaBeliActionPerformed(evt);
            }
        });

        InputKodeBarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputKodeBarangActionPerformed(evt);
            }
        });

        InputNamaBarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputNamaBarangActionPerformed(evt);
            }
        });

        InputHargaJual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputHargaJualActionPerformed(evt);
            }
        });

        InputStok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputStokActionPerformed(evt);
            }
        });

        ButtonSimpan.setBackground(new java.awt.Color(51, 255, 51));
        ButtonSimpan.setForeground(new java.awt.Color(0, 0, 0));
        ButtonSimpan.setText("Simpan");
        ButtonSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSimpanActionPerformed(evt);
            }
        });

        ButtonEdit.setBackground(new java.awt.Color(51, 51, 255));
        ButtonEdit.setForeground(new java.awt.Color(0, 0, 0));
        ButtonEdit.setText("Edit");
        ButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEditActionPerformed(evt);
            }
        });

        ButtonBatal.setText("Batal");
        ButtonBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBatalActionPerformed(evt);
            }
        });

        ButtonHapus.setBackground(new java.awt.Color(255, 51, 51));
        ButtonHapus.setForeground(new java.awt.Color(0, 0, 0));
        ButtonHapus.setText("Hapus");
        ButtonHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonHapusActionPerformed(evt);
            }
        });

        ButtonTutup.setBackground(new java.awt.Color(102, 102, 102));
        ButtonTutup.setForeground(new java.awt.Color(255, 255, 255));
        ButtonTutup.setText("Tutup");
        ButtonTutup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonTutupActionPerformed(evt);
            }
        });

        jSeparator1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        TabelBarang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TabelBarang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabelBarangMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TabelBarang);

        ButtonCari.setText("Cari");
        ButtonCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCariActionPerformed(evt);
            }
        });

        InputCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputCariActionPerformed(evt);
            }
        });

        ButtonCetak.setText("Cetak");
        ButtonCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCetakActionPerformed(evt);
            }
        });

        ButtonRefreshTabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/reload.png"))); // NOI18N
        ButtonRefreshTabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRefreshTabelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(InputHargaJual, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InputStok, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InputHargaBeli)
                            .addComponent(InputNamaBarang)
                            .addComponent(InputKodeBarang))
                        .addGap(36, 36, 36))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(ButtonRefreshTabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ButtonCari, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(InputCari, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ButtonCetak, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(184, 184, 184)
                                        .addComponent(jLabel1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ButtonSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(ButtonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addComponent(ButtonBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                        .addComponent(ButtonHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(ButtonTutup, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(34, 34, 34))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(162, 162, 162))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InputKodeBarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InputNamaBarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InputHargaBeli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InputHargaJual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(InputStok)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonSimpan)
                    .addComponent(ButtonEdit)
                    .addComponent(ButtonTutup)
                    .addComponent(ButtonBatal)
                    .addComponent(ButtonHapus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ButtonRefreshTabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonCetak)
                    .addComponent(InputCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonCari))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InputHargaBeliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputHargaBeliActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputHargaBeliActionPerformed

    private void InputKodeBarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputKodeBarangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputKodeBarangActionPerformed

    private void InputNamaBarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputNamaBarangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputNamaBarangActionPerformed

    private void InputHargaJualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputHargaJualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputHargaJualActionPerformed

    private void InputStokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputStokActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputStokActionPerformed

    private void ButtonSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSimpanActionPerformed
        // TODO add your handling code here:
        if (InputKodeBarang.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Kode Barang tidak boleh kosong");
            InputKodeBarang.requestFocus();
        } else if (InputNamaBarang.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Nama Barang tidak boleh kosong");
            InputNamaBarang.requestFocus();
        } else if (InputHargaBeli.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Harga Beli Barang tidak boleh kosong");
            InputHargaBeli.requestFocus();
        } else if (InputHargaJual.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Harga Jual Barang tidak boleh kosong");
            InputHargaJual.requestFocus();
        } else if (InputStok.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Stok Barang tidak boleh kosong");
            InputStok.requestFocus();
        } else
            try {
                Connection koneksi;
                koneksi = DriverManager.getConnection(mysqlUrl);
                
                String kodeBarang  = InputKodeBarang.getText();
                String cekQuery = "SELECT COUNT(*) FROM tabelbarang WHERE Kode = ?";
                PreparedStatement cekStmt = koneksi.prepareStatement(cekQuery);
                cekStmt.setString(1, InputKodeBarang.getText());
                ResultSet rs = cekStmt.executeQuery();

                rs.next();
                int jumlah = rs.getInt(1);
                
                if (jumlah > 0) {
                    JOptionPane.showMessageDialog(rootPane, 
                    "Kode Barang '" + kodeBarang + "' Sudah ada!\nSilakan gunakan kode lain.",
                    "Duplikasi Data",
                     JOptionPane.WARNING_MESSAGE);
                    System.out.println("Kode Barang '" + kodeBarang + "' Sudah ada atau duplikasi ata");
                    return;
                }
                
                koneksi.createStatement().executeUpdate("INSERT INTO tabelbarang VALUES('"+InputKodeBarang.getText()+"','"+InputNamaBarang.getText()+"','"+InputHargaBeli.getText()+"','"+InputHargaJual.getText()+"','"+InputStok.getText()+"')");
                JOptionPane.showMessageDialog(rootPane, "Data berhasil disimpan");
                InputKodeBarang.setText(null);
                InputNamaBarang.setText(null);
                InputHargaBeli.setText(null);
                InputHargaJual.setText(null);
                InputStok.setText(null);
//                InputKodeBarang.requestFocus();
                tampil(); //memanggil prosedur dengan nama tampil, prosedur harus dibuat terlebih dahulu
            } catch (SQLException error) {
                JOptionPane.showMessageDialog(rootPane, "Database Error: " + error.getMessage());
                System.out.println("Database Error: " + error.getMessage());
            }
    }//GEN-LAST:event_ButtonSimpanActionPerformed

    private void ButtonCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCariActionPerformed
        // TODO add your handling code here:
        String searchInput = InputCari.getText().trim();

        if (searchInput.equals("")) {
            JOptionPane.showMessageDialog(null, "Masukkan keyword terlebih dahulu!");
            InputCari.requestFocus();
            return;
        }

        try {
            int row = TabelBarang.getRowCount();
            for (int i = 0; i < row; i++) {
                table.removeRow(0);
            }

            // Koneksi ke database
            Connection koneksi = DriverManager.getConnection(mysqlUrl);

            // Query pencarian
            String query = "SELECT * FROM tabelbarang WHERE Kode LIKE ? OR NamaBarang LIKE ?";
            PreparedStatement pst = koneksi.prepareStatement(query);
            pst.setString(1, "%" + searchInput + "%");
            pst.setString(2, "%" + searchInput + "%");

            ResultSet rs = pst.executeQuery();
           
            // Cek apakah data ditemukan
            boolean found = false;
            while (rs.next()) {
                found = true;
                String[] data = {
                    rs.getString("Kode"),
                    rs.getString("NamaBarang"),
                    rs.getString("HargaBeli"),
                    rs.getString("HargaJual"),
                    rs.getString("Stok"),
                };
                table.addRow(data);
                System.out.println("hasil cari: " + Arrays.toString(data));
            }
            
            if (!found) {
                JOptionPane.showMessageDialog(rootPane, 
                    "Kode atau Nama Barang '" + searchInput + "' tidak ditemukan!\nSilahkan refresh untuk melihat tabel!");
                System.out.println("Kode atau Nama Barang '" + searchInput + "' tidak ditemukan!\nSilahkan refresh untuk melihat tabel!");
            }
        } catch (SQLException error) {
            JOptionPane.showMessageDialog(rootPane, "Database Error: " + error.getMessage());
            System.out.println("Database Error: " + error.getMessage());
        }    
    }//GEN-LAST:event_ButtonCariActionPerformed

    private void TabelBarangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabelBarangMouseClicked
        int selectedRow = TabelBarang.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) TabelBarang.getModel();

        // Ambil nilai dari tabel
        kodeLama = model.getValueAt(selectedRow, 0).toString(); // kolom 0 = kode
        String nama = model.getValueAt(selectedRow, 1).toString();
        String hargaBeli = model.getValueAt(selectedRow, 2).toString();
        String hargaJual = model.getValueAt(selectedRow, 3).toString();
        String stok = model.getValueAt(selectedRow, 4).toString();

        // Masukkan ke input field
        InputKodeBarang.setText(kodeLama);
        InputNamaBarang.setText(nama);
        InputHargaBeli.setText(hargaBeli);
        InputHargaJual.setText(hargaJual);
        InputStok.setText(stok);
    }//GEN-LAST:event_TabelBarangMouseClicked

    private void InputCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputCariActionPerformed
        // TODO add your handling code here:
        ButtonCari.doClick();
    }//GEN-LAST:event_InputCariActionPerformed

    private void ButtonTutupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonTutupActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ButtonTutupActionPerformed

    private void ButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEditActionPerformed
        // TODO add your handling code here:
        if (InputKodeBarang.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Kode Barang tidak boleh kosong");
            InputKodeBarang.requestFocus();
        } else if (InputNamaBarang.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Nama Barang tidak boleh kosong");
            InputNamaBarang.requestFocus();
        } else if (InputHargaBeli.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Harga Beli Barang tidak boleh kosong");
            InputHargaBeli.requestFocus();
        } else if (InputHargaJual.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Harga Jual Barang tidak boleh kosong");
            InputHargaJual.requestFocus();
        } else if (InputStok.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Stok Barang tidak boleh kosong");
            InputStok.requestFocus();
        } else
            try {
                Connection koneksi;
                koneksi = DriverManager.getConnection(mysqlUrl);
                String kodeBarang  = InputKodeBarang.getText();
                
                int result = koneksi.createStatement().executeUpdate("UPDATE tabelbarang SET Kode = '"+ kodeBarang +"', NamaBarang = '"+InputNamaBarang.getText()+"', HargaBeli = '"+InputHargaBeli.getText()+"',  HargaJual = ' "+InputHargaJual.getText()+"',  Stok = '"+InputStok.getText()+"' WHERE Kode = '"+kodeLama+"'");
                JOptionPane.showMessageDialog(rootPane, "Data berhasil disimpan");
                InputKodeBarang.setText(null);
                InputNamaBarang.setText(null);
                InputHargaBeli.setText(null);
                InputHargaJual.setText(null);
                InputStok.setText(null);
//                InputKodeBarang.requestFocus();
                tampil(); //memanggil prosedur dengan nama tampil, prosedur harus dibuat terlebih dahulu
            } catch (SQLException error) {
                JOptionPane.showMessageDialog(rootPane, "Database Error: " + error.getMessage());
                System.out.println("Database Error: " + error.getMessage());
            }
    }//GEN-LAST:event_ButtonEditActionPerformed

    private void ButtonBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBatalActionPerformed
        // TODO add your handling code here:
        InputKodeBarang.setText(null);
        InputNamaBarang.setText(null);
        InputHargaBeli.setText(null);
        InputHargaJual.setText(null);
        InputStok.setText(null);
        InputCari.setText(null);
        InputKodeBarang.requestFocus();
        tampil();
    }//GEN-LAST:event_ButtonBatalActionPerformed

    private void ButtonHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonHapusActionPerformed
        // TODO add your handling code here:
        try {
            Connection koneksi;
            koneksi = DriverManager.getConnection(mysqlUrl);
            String kodeBarang  = InputKodeBarang.getText();    
            int result = koneksi.createStatement().executeUpdate("DELETE FROM tabelbarang WHERE Kode = '"+ kodeBarang +"'");
            JOptionPane.showMessageDialog(rootPane, "Data berhasil dihapus dengan id: " + kodeBarang);
            InputKodeBarang.setText(null);
            InputNamaBarang.setText(null);
            InputHargaBeli.setText(null);
            InputHargaJual.setText(null);
            InputStok.setText(null);
            tampil();
        } catch(SQLException error) {
            JOptionPane.showMessageDialog(rootPane, "Database Error: " + error.getMessage());
            System.out.println("Database Error: " + error.getMessage());
        }
    }//GEN-LAST:event_ButtonHapusActionPerformed

    private void ButtonRefreshTabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRefreshTabelActionPerformed
        // TODO add your handling code here:
        
        try {
            // Koneksi ke database
            Connection koneksi = DriverManager.getConnection(mysqlUrl);

            // Ambil model tabel yang sudah ada
            DefaultTableModel table = (DefaultTableModel) TabelBarang.getModel();

            // Hapus semua baris lama
            int row = table.getRowCount();
            for (int i = 0; i < row; i++) {
                table.removeRow(0);
            }

            // Ambil semua data dari tabelbarang
            String sql = "SELECT * FROM tabelbarang";
            Statement stmt = koneksi.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            
            // Tambahkan ke JTable
            while (rs.next()) {
                String[] data = {
                    rs.getString("Kode"),
                    rs.getString("NamaBarang"),
                    rs.getString("HargaBeli"),
                    rs.getString("HargaJual"),
                    rs.getString("Stok")
                };
                table.addRow(data);
            }
            
            // Tutup koneksi
            koneksi.close();
            
            // Opsional: tampilkan pesan sukses
            JOptionPane.showMessageDialog(rootPane, "Tabel berhasil diperbarui!");

        } catch (SQLException error) {
            JOptionPane.showMessageDialog(rootPane, "Gagal memuat data: " + error.getMessage());
            System.out.println("Gagal memuat data: " + error.getMessage());
        }
    }//GEN-LAST:event_ButtonRefreshTabelActionPerformed

    private void ButtonCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCetakActionPerformed
        // TODO add your handling code here:
        try {
            File report = new File("./src/components/barang/reportBarang.jrxml");
            JasDesign = JRXmlLoader.load(report);
            parameter.clear();
            JasReport = JasperCompileManager.compileReport(JasDesign);
            JasPrint = JasperFillManager.fillReport(JasReport, parameter, con);
              // Buat instance JasperViewer
            JRViewer viewer = new JRViewer(JasPrint);

            // Buat JFrame baru sebagai container
            JFrame previewFrame = new JFrame("Preview Laporan");
            previewFrame.getContentPane().add(viewer);
            previewFrame.setExtendedState(JFrame.MAXIMIZED_BOTH); // full screen
            previewFrame.setAlwaysOnTop(true); // pastikan di atas
            previewFrame.setLocationRelativeTo(null); // tengah layar
            previewFrame.setVisible(true);
            previewFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);


        }catch(Exception error) {
            JOptionPane.showMessageDialog(null,"Gagal print: " + error.getMessage());
            System.out.println("Gagal print: " + error.getMessage());
        }
    }//GEN-LAST:event_ButtonCetakActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormBarang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormBarang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormBarang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormBarang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FormBarang dialog = new FormBarang(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonBatal;
    private javax.swing.JButton ButtonCari;
    private javax.swing.JButton ButtonCetak;
    private javax.swing.JButton ButtonEdit;
    private javax.swing.JButton ButtonHapus;
    private javax.swing.JButton ButtonRefreshTabel;
    private javax.swing.JButton ButtonSimpan;
    private javax.swing.JButton ButtonTutup;
    private javax.swing.JTextField InputCari;
    private javax.swing.JTextField InputHargaBeli;
    private javax.swing.JTextField InputHargaJual;
    private javax.swing.JTextField InputKodeBarang;
    private javax.swing.JTextField InputNamaBarang;
    private javax.swing.JTextField InputStok;
    private javax.swing.JTable TabelBarang;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

    
    private void tampil() {
        try {
            table.setRowCount(0); // hapus semua row
            Connection koneksi = DriverManager.getConnection(mysqlUrl);
            ResultSet dat = koneksi.createStatement().executeQuery("SELECT * FROM tabelbarang");
            while(dat.next()){
                String[] data = {dat.getString(1),dat.getString(2),dat.getString(3),dat.getString(4),dat.getString(5)};
                table.addRow(data);
            }
            koneksi.close();
        } catch (SQLException error) {
            JOptionPane.showMessageDialog(rootPane,"Database Error: " + error.getMessage());
            System.out.println("Database Error: " + error.getMessage());
        }
    }

}